# create corpus
corpus = Corpus(VectorSource(emo.docs))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = emos
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(nemo, "Dark2"),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
df <- do.call("rbind", lapply(some_tweets, as.data.frame))
write.csv(df, file ="TacoBellapp_Tweets.csv", row.names=FALSE)
length(some_tweets)
source('~/Rworking/Twitter_Sentiment.R')
## Get data for positive & negative words.
# fileURL <- "https://github.com/jumbopanda/Mining_Twitter/blob/master/Rscripts/negative_words.txt"
# download.file(fileURL, destfile="negative_words.txt")
# fileURL <- "https://github.com/jumbopanda/Mining_Twitter/blob/master/Rscripts/positive_words.txt"
# download.file(fileURL, destfile="positive_words.txt")
# =========================================================================
# Title:        Sentiment_Analysis_with_Starbucks.R
# Author:       Gaston Sanchez
# Date:         May, 2012
# Description:  Script showing how to perform a sentiment analysis using
#				the R package "sentiment" by Timothy Jurka.
#               This example uses tweets talking about "starbucks"
#
# License:      BSD Simplified License
#               http://www.opensource.org/license/BSD-3-Clause
#               Copyright (c) 2012, Gaston Sanchez
#               All rights reserved
# =========================================================================
# -------------------------------------------------------------------------
# Important Note:
# The R package "sentiment" depends on Duncan Temple Lang's "Rstem" package
# that is only available at www.Omegahat.com
# At the time of this writing, I'm using the version 0.4-1
# (I downloaded and installed the tar.gz file from the package website).
# -------------------------------------------------------------------------
# api_key <- "dPuKtSyhUZ9ibvrg5BeRXIIGS"
# api_secret <- "2z5dEGGFFQFMPYRWL18hnwDtowZJFOPKYIcFVAyUGp1KNFS0Kr"
# access_token <- "933227101-rwPS6yDP1kPTpxztes4qGWY1Al75eys167edC8Bz"
# access_token_secret <- "5sj79o9TGH926t1cR0hq8PH11DUNmC3m8PZKMZTUTt0qM"
# setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
# required pakacges
require(twitteR)
require(sentiment)
require(plyr)
require(ggplot2)
require(wordcloud)
require(RColorBrewer)
# harvest some tweets in english about 'starbucks'
some_tweets = searchTwitter("starbucks app", n=2500, lang='en')
# , geocode='47.63,-122.521,56mi')
# get the text
some_txt = sapply(some_tweets, function(x) x$getText())
# remove retweet entities
some_txt = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", some_txt)
# remove at people
some_txt = gsub("@\\w+", "", some_txt)
# remove punctuation
some_txt = gsub("[[:punct:]]", "", some_txt)
# remove numbers
some_txt = gsub("[[:digit:]]", "", some_txt)
# remove html links
some_txt = gsub("http\\w+", "", some_txt)
# remove unnecessary spaces
some_txt = gsub("[ \t]{2,}", "", some_txt)
some_txt = gsub("^\\s+|\\s+$", "", some_txt)
# define "tolower error handling" function
tryTolower = function(x)
{
# create missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not an error
if (!inherits(try_error, "error"))
y = tolower(x)
# result
return(y)
}
# lower case using tryTolower with sapply
some_txt = sapply(some_txt, tryTolower)
# remove NAs in some_txt
some_txt = some_txt[!is.na(some_txt)]
names(some_txt) = NULL
# Perform Sentiment Analysis
# classify emotion
class_emo = classify_emotion(some_txt, algorithm="bayes", prior=1.0)
# get emotion best fit
emotion = class_emo[,7]
# substitute NA's by "unknown"
emotion[is.na(emotion)] = "unknown"
# classify polarity
class_pol = classify_polarity(some_txt, algorithm="bayes")
# get polarity best fit
polarity = class_pol[,4]
# data frame with results
sent_df = data.frame(text=some_txt, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
# sort data frame
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
# plot distribution of emotions
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="number of tweets")
# +
#   opts(title = "Sentiment Analysis of Tweets about Starbucks\n(classification by emotion)",
#       plot.title = theme_text(size=12))
# plot distribution of polarity
ggplot(sent_df, aes(x=polarity)) +
geom_bar(aes(y=..count.., fill=polarity)) +
scale_fill_brewer(palette="RdGy") +
labs(x="polarity categories", y="number of tweets")
# +
#   opts(title = "Sentiment Analysis of Tweets about Starbucks\n(classification by polarity)",
#   plot.title = theme_text(size=12))
# separating text by emotion
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep("", nemo)
for (i in 1:nemo)
{
tmp = some_txt[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse=" ")
}
# remove stopwords
emo.docs = removeWords(emo.docs, stopwords("english"))
# create corpus
corpus = Corpus(VectorSource(emo.docs))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = emos
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(nemo, "Dark2"),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
df <- do.call("rbind", lapply(some_tweets, as.data.frame))
write.csv(df, file ="TacoBellapp_Tweets.csv", row.names=FALSE)
length(some_tweets)
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
## Reproducible Reseach Project #1
library(plyr)
library(ggplot2)
setwd("C:/Users/John/Documents/R/RepResearch")
## Read data
data <- read.csv("activity.csv")
data1<-ddply(data, .(date), summarize, tot_steps=sum(steps))
## Histogram of Steps taken each day
hist(data1$tot_steps, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day Histogram")
data2<-ddply(data1, .(date), summarize(mean_steps=mean(steps), median_steps=median(steps)))
head(data2)
data2<-ddply(data1, .(date), summarize(mean_steps=mean(steps), median_steps=median(steps)))
head(data1)
data2<-ddply(data, .(date), summarize(mean_steps=mean(steps), median_steps=median(steps)))
data2 <- ddply(data, c("date"), function(data) return(c(mean=mean(data$steps), median=median(data$steps))))
head(data2)
hist(data$steps, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day Histogram")
data3<-ddply(data, .(date, interval), summarize, interval_steps=sum(steps))
head(data3)
data3<-ddply(data, .(interval), summarize, interval_steps=sum(steps))
head(data3)
head(data3,100)
data3<-ddply(data, .(interval), summarize, interval_steps=sum(steps),na.rm=TRUE)
head(data3,100)
data3<-ddply(data[,(na.rm=TRUE)], .(interval), summarize, interval_steps=sum(steps))
head(data3,100)
data3<-ddply(na.omit(data), .(interval), summarize, interval_steps=sum(steps))
data3<-ddply(na.omit(data), .(interval), summarize, interval_steps=sum(steps))
head(data3)
plot(data3$interval, data3$interval_steps, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day Histogram", type="l")
data3<-ddply(na.omit(data <- as.factor(data[, 'interval'])), .(interval), summarize, interval_steps=sum(steps))
data3<-ddply(na.omit(data, .(interval), summarize, interval_steps=sum(steps))
data3<-ddply(na.omit(data), .(interval), summarize, interval_steps=sum(steps))
data3<-ddply(na.omit(data), .(interval), summarize, interval_steps=sum(steps))
data3<-ddply(na.omit(data), .(interval), summarize, interval_steps=sum(steps))
data3<-ddply(na.omit(data), .(interval), summarize, interval_steps=sum(steps))
head(data)
data <- read.csv("activity.csv")
data1<-ddply(data, .(date), summarize, tot_steps=sum(steps))
## Histogram of Steps taken each day
hist(data1$tot_steps, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day Histogram")
## Calculates the mean and median of steps per each day.
data2 <- ddply(data, c("date"), function(data) return(c(mean=mean(data$steps), median=median(data$steps))))
## Shows the median is really 0.
hist(data$steps, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day Histogram")
data3<-ddply(na.omit(data), .(interval), summarize, interval_steps=sum(steps))
data3 <- as.factor(data3$interval)
plot(data3$interval, data3$interval_steps, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l")
plot(data3$interval_steps, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l")
data3<-ddply(na.omit(data), .(interval), summarize, interval_steps=sum(steps))
plot(data3$interval, data3$interval_steps, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l")
head(data3)
data3<-ddply(na.omit(data), .(interval), summarize, interval_steps_mean=mean(steps))
data3 <- as.factor(data3$interval)
plot(data3$interval, data3$interval_steps_mean, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l")
plot(data3$interval, data3$interval_steps_mean, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l")
data3<-ddply(na.omit(data), .(interval), summarize, interval_steps_mean=mean(steps))
data3<-ddply(na.omit(data), .(interval), summarize, interval_steps_mean=mean(steps))
head(data)
data3<-ddply(na.omit(data), .(interval), summarize, interval_steps_mean=mean(steps))
plot(data3$interval, data3$interval_steps_mean, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l")
data3 <- as.factor(data3$interval)
plot(data3$interval, data3$interval_steps_mean, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l")
data3<-ddply(na.omit(data), .(interval), summarize, interval_steps_mean=mean(steps))
plot(data3$interval, data3$interval_steps_mean, xlab=data3$interval, ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l")
plot(data3$interval, data3$interval_steps_mean, xlab="Interval", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l")
plot(data3$interval, data3$interval_steps_mean, xlab="Interval", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l", xaxp = c(0, 2*pi, 5))
plot(data3$interval, data3$interval_steps_mean, xlab="Interval", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l", xaxp = c(0-23))
plot(data3$interval, data3$interval_steps_mean, xlab="Interval", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l", xaxp = c(0:23))
hours <- c(0:24)
plot(data3$interval, data3$interval_steps_mean, xlab="Interval", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l", xaxp = c(hours))
plot(data3$interval, data3$interval_steps_mean, xlab="Interval", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l", xaxt='n')
axis(side = 1, at = x,labels = T)
axis(side = 1, at = data3$interval,labels = T)
head(data3,500)
plot(data3$interval, data3$interval_steps_mean, xlab="Interval", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l")
plot(data3$interval, data3$interval_steps_mean, xlab="Interval", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l", xaxt='n')
axis(side = 1, at = data3$interval,labels = T)
plot(data3$interval, data3$interval_steps_mean, xlab="Interval", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l")
NAs <- length(data([is.na,]))
NAs <- length(data(is.na,))
NAs <- length(data[is.na,])
NAs <- is.na(data)
str(NAs)
length(NAs)
numrow(NAs)
numrows(NAs)
numRows(NAs)
NAs <- is.na(data)
nrows(NAs)
nrow(NAs)
head(NAs)
head(NAs,500)
head(data,100)
nrow(NAs)
head(data)
data2 <- ddply(data, c("date"), function(data) return(c(mean=mean(data$steps), median=median(data$steps))))
head(data2)
data4 <- ddply(data, c("date"), function(data) return(c(mean=mean(data$steps)))
data4 <- ddply(data, c("date"), function(data) return(c(mean=mean(data$steps))))
data4 <- ddply(data, c("date"), function(data) return(c(mean=mean(data$steps))))
head(data4)
replace(data4, is.na(data$mean), "50")
head(data4)
replace(data4$mean, is.na(data$mean), "50")
head(data4,100)
is.na(data4$mean) <- "50"
is.na(data4$mean) <- "50"
is.na(data4$mean) <- 50
head(data4)
data4$mean[is.na(data4$mean),] <- 50
left <- head(data)
right <- head(data4)
left
head
head(data)
right
left
right[is.na(right)] <- mean(right, na.rm = TRUE)
right[is.na(right$steps)] <- mean(right$steps, na.rm = TRUE
)
right
right[is.na(right$mean)] <- mean(right$mean, na.rm = TRUE)
right
right <- head(data4)
left <- head(data)
left
right
right$mean[is.na(right$mean)] <- mean(right$mean, na.rm = TRUE)
right
merge(left, right, by date)
left
right
merge(left,right)
merge(left, right, ALL.x=TRUE)
data5$steps <- if(is.na(steps),data$5mean else data$5steps)
data5$steps[data5$steps %in% "NA"] <- data5$mean
data5 <- merge(left, right, ALL.x=TRUE)
data5$steps[data5$steps %in% "NA"] <- data5$mean
data5
data5[data5$steps %in% "NA"] <- data5$mean
data5[,data5$steps == "NA"] <- data5$mean
data5$steps[data$5steps == "NA"] <- (data5$mean)
data5$steps[data5$steps == "NA"] <- (data5$mean)
data5$steps[is.na(data5$steps)] <- (data5$mean)
data5
## Where 'right' is head(data4).  Replace date mean with column mean to clean lookup table.
data4$mean[is.na(data4$mean)] <- mean(data4$mean, na.rm = TRUE)
data5 <- merge(data, data4, ALL.x=TRUE)
data5$steps[is.na(data5$steps)] <- (data5$mean)
data5
View(data3)
data5$steps[is.na(data5$steps),] <- (data5$mean)
data5$steps[data5$steps == NA)] <- (data5$mean)
data5$steps[data5$steps == NA] <- data5$mean
data5$steps[data5$steps == 'NA'] <- data5$mean
data5
head(data5)
data5 <- merge(data, data4, ALL.x=TRUE)
head(data5)
data5$steps[data5$steps == 'NA'] <- data5$mean
data5$steps[data5$steps == 'NA'] <- data5$mean
data5$steps[data5$steps == NA] <- data5$mean
data5$steps[,data5$steps == NA] <- data5$mean
data5[data5$steps == NA] <- data5$mean
data5$steps[data5$steps == NA] <- data5$mean
data5[is.na(data5$steps)] <- data5$mean
data5[data5$steps==NA,] <= data5[data5$mean,]
data5[data5$steps==NA] <= data5[data5$mean]
data5$steps <- ifelse(is.na(data5$steps), data5$mean, data5$steps)
head(data5, 500)
## Where 'right' is head(data4).  Replace date mean with column mean to clean lookup table.
data4$mean[is.na(data4$mean)] <- mean(data4$mean, na.rm = TRUE)
## now Left is head(data), right is lookup table.  Need to merge on date.
data5 <- merge(data, data4, ALL.x=TRUE)
## This replaces the NA in the steps column with the mean for that date from the mean column.
data5$steps <- ifelse(is.na(data5$steps), data5$mean, data5$steps)
head(data)
head(data5)
data6 <- (data5[,c("steps","date", "interval")])
head(data6)
data7 <- ddply(data6, c("date"), function(data6) return(c(mean=mean(data6$steps), median=median(data6$steps))))
data7
hist(data7$steps, xlab="", ylab="Steps Per Day- New Data", main="Project 1:  Steps Per Day Histogram - Substituted Means for NAs")
head(data7)
data7 <- ddply(data6, c("date"), function(data6) return(c((total=sum(data6$steps),mean=mean(data6$steps), median=median(data6$steps))))
data7 <- ddply(data6, c("date"), function(data6) return(c(total=sum(data6$steps),mean=mean(data6$steps), median=median(data6$steps))))
head(data7)
data2 <- ddply(data, c("date"), function(data) return(c((total=sum(data6$steps),mean=mean(data$steps), median=median(data$steps))))
data2 <- ddply(data, c("date"), function(data) return(c(total=sum(data$steps),mean=mean(data$steps), median=median(data$steps))))
hist(data7$total, xlab="", ylab="Steps Per Day- New Data", main="Project 1:  Steps Per Day Histogram - Substituted Means for NAs")
hist(data2$total, xlab="", ylab="Steps Per Day- New Data", main="Project 1:  Steps Per Day Histogram - Substituted Means for NAs")
hist(data2$total, xlab="", ylab="Steps Per Day- Original Data", main="Project 1:  Steps Per Day Histogram -  Means for NAs")
test <- head(data7)
test
test <- head(data6)
test
test$weekday <- weekday(date)
test$weekday <- weekdays(date)
test$weekend <- isWeekend(date)
test$day <- weekdays(as.Date(test$date))
test
test$weekday <- ifelse(weekdays(as.Date(test$date), c("Sunday", "Saturday"), "Weekend", "Weekday")
)
test$weekday <- ifelse(weekdays(as.Date(test$date) %IN% c("Sunday", "Saturday"), "Weekend", "Weekday"))
test$weekday <- ifelse(weekdays(as.Date(test$date) == c("Sunday", "Saturday"), "Weekend", "Weekday"))
test$weekday <- ifelse(weekdays(as.Date(test$date)) == c("Sunday", "Saturday"), "Weekend", "Weekday")
test
test <- head(data6)
test$weekday <- ifelse(weekdays(as.Date(test$date)) == c("Sunday", "Saturday"), "Weekend", "Weekday")
test
test <- head(data6)
test$day_type <- ifelse(weekdays(as.Date(test$date)) == c("Sunday", "Saturday"), "Weekend", "Weekday")
test
data8$day_type <- ifelse(weekdays(as.Date(data6$date)) == c("Sunday", "Saturday"), "Weekend", "Weekday")
data6$day_type <- ifelse(weekdays(as.Date(data6$date)) == c("Sunday", "Saturday"), "Weekend", "Weekday")
## summarize by interval and present average.
data8 <- ddply(data6, c("day_type", "interval"), function(data6) return(c(total=sum(data6$steps),mean=mean(data6$steps), median=median(data6$steps))))
data8
data6
data6$day_type <- ifelse(weekdays(data6$date) == c("Sunday", "Saturday"), "Weekend", "Weekday")
data6$day_type <- ifelse(weekdays(as.date(data6$date)) == c("Sunday", "Saturday"), "Weekend", "Weekday")
test <- head(data6)
test$day_type <- ifelse(weekdays(as.Date(test$date)) == c("Sunday", "Saturday"), "Weekend", "Weekday")
## now Left is head(data), right is lookup table.  Need to merge on date.
data5 <- merge(data, data4, ALL.x=TRUE)
## This replaces the NA in the steps column with the mean for that date from the mean column.
data5$steps <- ifelse(is.na(data5$steps), data5$mean, data5$steps)
## recreate origina data set structure by reordering columns and excuding the mean column.
data6 <- (data5[,c("steps","date", "interval")])
## summarize by date the total, mean and medians.
data7 <- ddply(data6, c("date"), function(data6) return(c(total=sum(data6$steps),mean=mean(data6$steps), median=median(data6$steps))))
## Plot historgram of new data with inserted means:
hist(data7$total, xlab="", ylab="Steps Per Day- New Data", main="Project 1:  Steps Per Day Histogram - Substituted Means for NAs")
## and compare to hisogram of original data without substituted means.
hist(data2$total, xlab="", ylab="Steps Per Day- Original Data", main="Project 1:  Steps Per Day Histogram -  Means for NAs")
##  add weekday info to data with added means- data7
data6$day_type <- ifelse(weekdays(as.Date(data6$date)) == c("Sunday", "Saturday"), "Weekend", "Weekday")
data6
data6$day_type <- ifelse(weekdays(as.Date(data6$date)) %in% c("Sunday", "Saturday"), "Weekend", "Weekday")
data6
## summarize by interval and present average.
data8 <- ddply(data6, c("day_type", "interval"), function(data6) return(c(total=sum(data6$steps),mean=mean(data6$steps), median=median(data6$steps))))
data8
head(data8)
gg<-ggplot(data8, aes(x=interval, y=total)) + geom_point(shape=1) + facet_grid(.~day_type)
gg + ggtitle("Baltimore City Emissions")
head(data8)
data6$day_type <- as.factor(ifelse(weekdays(as.Date(data6$date)) %in% c("Sunday", "Saturday"), "Weekend", "Weekday"))
str(data6)
gg<-ggplot(data8, aes(x=interval, y=total)) + geom_point(shape=1) + facet_grid(.~day_type)
gg<-ggplot(data8, aes(x=interval, y=total)) + geom_point(shape=1) + facet_grid(.~day_type)
gg + ggtitle("Steps by Interval for Weekend and Weekday")
gg<-ggplot(data8, aes(x=interval, y=total)) + geom_line() + facet_grid(.~day_type)
gg + ggtitle("Steps by Interval for Weekend and Weekday")
gg<-ggplot(data8, aes(x=interval, y=total)) + geom_line() + facet_grid(.~day_type)
gg + ggtitle("Steps by Interval for Weekend and Weekday")
gg +labs(x="Interval Number",y="Total Per Interval")
gg<-ggplot(data8, aes(x=interval, y=total)) + geom_line() + facet_grid(.~day_type)
gg + ggtitle("Steps by Interval for Weekend and Weekday")
gg +labs(x="Interval Number",y="Total Steps Per Interval")
## Reproducible Reseach Project #1
library(plyr)
library(ggplot2)
library(knitr)
setwd("C:/Users/John/Documents/R/RepResearch")
## Read data
data <- read.csv("activity.csv")
data1<-ddply(data, .(date), summarize, tot_steps=sum(steps))
## Histogram of Steps taken each day
hist(data1$tot_steps, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day Histogram")
## Calculates the mean and median of steps per each day.
data2 <- ddply(data, c("date"), function(data) return(c(total=sum(data$steps),mean=mean(data$steps), median=median(data$steps))))
## Shows the median is really 0.
hist(data$steps, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day Histogram")
## Plot of Steps taken each interval
plot(data3$interval, data3$interval_steps_mean, xlab="Interval", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l")
## Count NAs
NAs <- is.na(data)
nrow(NAs)
##Get table of means by day
data4 <- ddply(data, c("date"), function(data) return(c(mean=mean(data$steps))))
## Where 'right' is head(data4).  Replace date mean with column mean to clean lookup table.
data4$mean[is.na(data4$mean)] <- mean(data4$mean, na.rm = TRUE)
## now Left is head(data), right is lookup table.  Need to merge on date.
data5 <- merge(data, data4, ALL.x=TRUE)
## This replaces the NA in the steps column with the mean for that date from the mean column.
data5$steps <- ifelse(is.na(data5$steps), data5$mean, data5$steps)
## recreate origina data set structure by reordering columns and excuding the mean column.
data6 <- (data5[,c("steps","date", "interval")])
## summarize by date the total, mean and medians.
data7 <- ddply(data6, c("date"), function(data6) return(c(total=sum(data6$steps),mean=mean(data6$steps), median=median(data6$steps))))
## Plot historgram of new data with inserted means:
hist(data7$total, xlab="", ylab="Steps Per Day- New Data", main="Project 1:  Steps Per Day Histogram - Substituted Means for NAs")
## and compare to hisogram of original data without substituted means.
hist(data2$total, xlab="", ylab="Steps Per Day- Original Data", main="Project 1:  Steps Per Day Histogram -  Means for NAs")
##  add weekday info to data with added means- data7
data6$day_type <- as.factor(ifelse(weekdays(as.Date(data6$date)) %in% c("Sunday", "Saturday"), "Weekend", "Weekday"))
## summarize by interval and present average.
data8 <- ddply(data6, c("day_type", "interval"), function(data6) return(c(total=sum(data6$steps),mean=mean(data6$steps), median=median(data6$steps))))
## Plot w Facets
gg<-ggplot(data8, aes(x=interval, y=total)) + geom_line() + facet_grid(.~day_type)
gg + ggtitle("Steps by Interval for Weekend and Weekday")
gg +labs(x="Interval Number",y="Total Steps Per Interval")
## Plot w Facets
gg<-ggplot(data8, aes(x=interval, y=total)) + geom_line() + facet_grid(.~day_type)
gg + ggtitle("Steps by Interval for Weekend and Weekday")
gg +labs(x="Interval Number",y="Total Steps Per Interval")n+ title("Comparing Steps Per Interval:  Weekend v Weekday")
## Plot w Facets
gg<-ggplot(data8, aes(x=interval, y=total)) + geom_line() + facet_grid(.~day_type)
gg + ggtitle("Steps by Interval for Weekend and Weekday")
gg +labs(x="Interval Number",y="Total Steps Per Interval") + title("Comparing Steps Per Interval:  Weekend v Weekday")
gg +labs(x="Interval Number",y="Total Steps Per Interval") + title("Comparing Steps Per Interval:  Weekend v Weekday")
gg<-ggplot(data8, aes(x=interval, y=total)) + geom_line() + facet_grid(.~day_type)
gg + ggtitle("Steps by Interval for Weekend and Weekday")
gg +labs(x="Interval Number",y="Total Steps Per Interval")
gg + ggtitle("Steps by Interval for Weekend and Weekday")
## Plot w Facets
gg<-ggplot(data8, aes(x=interval, y=total)) + geom_line() + facet_grid(.~day_type)
gg + ggtitle("Steps by Interval for Weekend and Weekday")
gg +labs(x="Interval Number",y="Total Steps Per Interval")
gg<-ggplot(data8, aes(x=interval, y=total)) + geom_line() + facet_grid(.~day_type)
gg +labs(x="Interval Number",y="Total Steps Per Interval")
gg + ggtitle("Steps by Interval for Weekend and Weekday")
title: "Untitled"
library(knitr)
## Reproducible Reseach Project #1
library(plyr)
library(ggplot2)
library(knitr)
setwd("C:/Users/John/Documents/R/RepResearch")
## Read data
data <- read.csv("activity.csv")
data1<-ddply(data, .(date), summarize, tot_steps=sum(steps))
## Histogram of Steps taken each day
hist(data1$tot_steps, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day Histogram")
data2 <- ddply(data, c("date"), function(data) return(c(total=sum(data$steps),mean=mean(data$steps), median=median(data$steps))))
hist(data$steps, xlab="", ylab="Steps Per Day", main="Project 1:  Steps Per Day Histogram")
## Plot of Steps taken each interval
plot(data3$interval, data3$interval_steps_mean, xlab="Interval", ylab="Steps Per Day", main="Project 1:  Steps Per Day ", type="l")
head(data3)
data3x <- ddply(data, c("interval"), function(data) return(c(interval_steps_mean=mean(data$steps)))
data3x <- ddply(data, c("interval"), function(data) return(c(interval_steps_mean=mean(data$steps)))
data3x <- ddply(data, c("interval"), function(data) return(c(interval_steps_mean=mean(data$steps)))
data3x <- ddply(data, c("interval"), function(data) return(c(interval_steps_mean=mean(data$steps))))
data3x <- ddply(data, c("interval"), function(data) return(c(interval_steps_mean=mean(data$steps))))
head(data3x)
data3x <- ddply(omit.na(data), c("interval"), function(data) return(c(interval_steps_mean=mean(data$steps))))
data3x <- ddply(na.omit(data), c("interval"), function(data) return(c(interval_steps_mean=mean(data$steps))))
head(3x)
head(data3x)
head(data3)
nrows(data)
nrow(data)
a <- complete.cases(data)
nrow(a)
head(data)
head(data, 500)
head(data, 5000-5500)
b <- !is.na(data)
head(b)
a <- complete.cases(data)
head(a)
nas <- is.na(data)
sum(nas)
